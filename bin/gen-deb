#!/bin/bash -e

SW=$1
rev=$2
[[ -z $SW ]] && { echo "Usage: $(basename $0) <software> [revision]"; exit 2; }

TPLDIR=$(dirname "$0")/../templates; TPLDIR=$(readlink -f "$TPLDIR")
source "$TPLDIR/VARS"

BUILDDIR=$(readlink -f "$BUILDDIR")
CACHEDIR=$(readlink -f "$CACHEDIR")
bindir=$(readlink -f $(dirname "$0"))
VARS=(SOURCE NAME DATE YEAR MAINTAINER URL REVISION VERSION HOMEPAGE COPYRIGHT)
DATE=$(date -R)
YEAR=$(date +%Y)
suffix="tar.gz"
srcname(){ sed 's/^Source: \(.*\)$/\1/p;d' "${1:-./}"debian/control ;}
srcver(){ sed '1s/.*(\([^)]*\)).*/\1/p;d' "${1:-./}"/debian/changelog ;}

tpldir="$TPLDIR/software/$1"
debiandir="$tpldir/debian"
[[ ! -e "$tpldir" ]] && { echo "Cannot find template for $SW"; exit 2; }
[[ ! -e "$debiandir" ]] && { echo "Cannot find debian template for $SW"; exit 2; }
[[ -f "$TPLDIR/software/VARS" ]] && source "$TPLDIR/software/VARS"
[[ -f "$tpldir/VARS" ]] && source "$tpldir/VARS"

mkdir -p "$CACHEDIR"
cd "$CACHEDIR"
eval $($bindir/gen-archive "$URL" "$rev" "$suffix")

mkdir -p "$BUILDDIR"
cd "$BUILDDIR"

# Create series-independent build directory from templates
builddirs=($(mktemp -d $SW.XXXXX.0))
pushd "${builddirs[0]}"
  tar -x --strip-components=1 -f "$CACHEDIR/$TARBALL"
  COPYRIGHT="\n$($bindir/gen-copyrights | sed 's/$/\\n/' | tr -d '\n' | sed 's/\\n$//')"
  cp -a "$TPLDIR/formats/debian" ./
  cp -a "$debiandir/"* debian/
  SOURCE=$(srcname)
  HOMEPAGE=$(sed -n 's/^Homepage: \(.*\)$/\1/p' debian/control)
  [[ -f debian/VARS ]] && { source debian/VARS; rm debian/VARS; }
  { for v in "${VARS[@]}"; do echo "s|$v|${!v}|g"; done; } | sed -i'' -f- debian/changelog debian/control debian/copyright
  srcname=$(srcname)
  DEBREVCNT=1
  ln -sTf "$CACHEDIR/$TARBALL" ../${srcname}_$(sed '1s/.*(\([^)]*\)-.*/\1/p;d' debian/changelog).orig.$suffix
  for ver in $(wget -nv -O - $(for s in ${ALLSERIES[@]/local/}; do echo "$APTURL/dists/$s/main/source/Sources"; done) | sed '/^Package: '$srcname'$/,/^$/s/^Version: //p;d'); do 
    [[ ${ver%-*} == $VERSION ]] && [[ $ver =~ -([0-9]*)~ ]] && { n=$((${BASH_REMATCH[1]}+1)); (($n>$DEBREVCNT)) && DEBREVCNT=$n;}
  done
  (( $DEBREVCNT > 1 )) && haveorig=1 || unset haveorig
  sed -i'' "s/DEBREVCNT/$DEBREVCNT/g" debian/changelog
popd

# From series-independent build directory, create one build directory per series
for ((n=1; n<${#ALLSERIES[@]}; ++n)); do
  builddirs+=(${builddirs[0]%.*}.$n)
  cp -afT "${builddirs[0]}" "${builddirs[-1]}"
done
for ((n=0; n<${#ALLSERIES[@]}; ++n)); do
  sed -i'' "s/SERIES/${ALLSERIES[$n]}/g" "${builddirs[$n]}"/debian/changelog
  builddir=${srcname}_$(srcver "${builddirs[$n]}").builddir
  rm -rf "$builddir"
  mv "${builddirs[$n]}" "$builddir"
  builddirs[$n]=$builddir
done

# Build from each build directory
dscs=()
for builddir in "${builddirs[@]}"; do
  pushd "$builddir"
    distro=$(parsechangelog | sed 's/^Distribution: //p;d')
    if [[ $distro == local ]]; then
      debuild -j$JOBS -b -D -us -uc --lintian-opts --suppress-tags bad-distribution-in-changes-file
    else
      debuild -j$JOBS -S $( (($haveorig)) && echo "-sd" || echo "-sa" )
      haveorig=1
      dscs+=(${builddir%.*}.dsc)
    fi
  popd
done

# Build binary packages using pbuilder-dist
d=$(mktemp -d)
cat >"$d/D00update-local-repo" <<-.
  (cd $BUILDDIR; dpkg-scanpackages -m . > Packages)
  apt-get update
.
chmod +x "$d"/*
for dsc in "${dscs[@]}"; do
  series=$(sed 's/^Version: .*~//p;d' "$dsc")
  for arch in "${ALLARCH[@]}"; do
    pbuilder-dist $series $arch build --allow-untrusted --debbuildopts "-j$JOBS" --buildresult "$BUILDDIR" --bindmounts "$BUILDDIR" --hookdir "$d" --othermirror "deb file://$BUILDDIR ./" --override-config "$dsc"
  done
done
rm -rf "$d"
